"""
    dynamic & static feature extraction in cuckoo sandbox reports.json

    dynamic features
        - Process : 생성된 process 목록
        - API calls : 호출된 Windows API 함수 목록, 빈도, sequence
        - File system : 접근하거나 수정한 파일 목록
        - Registry : 읽거나 수정한 registry keys
        - Network : DNS 요청, 접속한 IP 주소 및 domain, protocol, packet information
        - Memory : memory 할당 및 보호 변경
        - System : 생성되거나 수정된 서비스, loaded DLL

    static features
        - Metadata : 파일 크기, 파일 해시 (MD5, SHA1, SHA256) 등
        - PE header : 임포트된 DLL 및 함수 목록, 섹션 정보, 엔트로피 값 등
        - Strings : URL, IP 주소, 파일 경로 등의 중요한 문자열
        - Opcode (Deprecated) : Cuckoo sandbox는 opcode를 추출할 수 없음
"""
import os
import csv
import json
import hashlib
from tqdm import tqdm


def clean_text(text):
    return text.encode('utf-8', errors='replace').decode('utf-8')


def extract_features(report):
    features = {
        'dynamic': {},
        'static': {}
    }

    # Dynamic features
    features['dynamic']['processes'] = [p['process_name'] for p in report.get('behavior', {}).get('processes', [])]

    api_calls = []
    for process in report.get('behavior', {}).get('processes', []):
        for call in process.get('calls', []):
            api_calls.append(call.get('api', ''))
    features['dynamic']['api_calls'] = api_calls

    features['dynamic']['files_accessed'] = report.get('behavior', {}).get('summary', {}).get('file_opened', [])
    features['dynamic']['registry_keys'] = report.get('behavior', {}).get('summary', {}).get('regkey_opened', [])

    network = report.get('network', {})
    features['dynamic']['dns_requests'] = [d['request'] for d in network.get('dns', [])]
    features['dynamic']['ip_addresses'] = network.get('hosts', [])
    features['dynamic']['protocols'] = [k for k in network.keys() if k in ['udp', 'tcp', 'http', 'dns']]

    features['dynamic']['memory_operations'] = [c['api'] for p in report.get('behavior', {}).get('processes', []) for c
                                                in p.get('calls', []) if 'memory' in c['category'].lower()]

    features['dynamic']['loaded_dlls'] = report.get('behavior', {}).get('summary', {}).get('dll_loaded', [])

    # Static features
    target = report.get('target', {}).get('file', {})
    features['static']['file_size'] = target.get('size', '')
    features['static']['md5'] = target.get('md5', '')
    features['static']['sha1'] = target.get('sha1', '')
    features['static']['sha256'] = target.get('sha256', '')

    features['static']['imported_dlls'] = list(target.get('imported_dll_count', {}).keys())
    features['static']['sections'] = [s['name'] for s in target.get('sections', [])]

    features['static']['strings'] = [s for s in report.get('strings', []) if
                                     any(x in s.lower() for x in ['http', 'https', 'ftp', ':\\', '.exe', '.dll'])]

    return features


def process_reports(reports_dir, output_dir):
    print("Reports directory : %s" % reports_dir)
    print("Extracted features directory : %s" % output_dir)
    print("Extract feature in cuckoo sandbox reports...")

    # 전체 파일 수 계산
    total_files = sum(1 for f in os.listdir(reports_dir) if f.endswith('.json'))

    # tqdm으로 진행 상황 표시
    with tqdm(total=total_files, desc="Processing reports", unit="file") as pbar:
        for filename in os.listdir(reports_dir):
            if filename.endswith('.json'):
                with open(os.path.join(reports_dir, filename), 'r') as f:
                    report = json.load(f)
                    features = extract_features(report)

                    # Use SHA256 hash as filename
                    hash_name = features['static']['sha256']
                    if not hash_name:
                        # If SHA256 is not available, use MD5 or generate a hash from the filename
                        hash_name = features['static']['md5'] or hashlib.md5(filename.encode()).hexdigest()

                    for feature_type, feature_dict in features.items():
                        for feature_name, feature_value in feature_dict.items():
                            feature_dir = os.path.join(output_dir, f"{feature_type}-{feature_name}")
                            if not os.path.exists(feature_dir):
                                os.makedirs(feature_dir)

                            output_file = os.path.join(feature_dir, f"{hash_name}.csv")

                            with open(output_file, 'w', newline='', encoding='utf-8') as f:
                                writer = csv.writer(f)
                                if isinstance(feature_value, list):
                                    for item in feature_value:
                                        writer.writerow([clean_text(str(item))])
                                elif isinstance(feature_value, dict):
                                    for key, value in feature_value.items():
                                        writer.writerow([clean_text(str(key)), clean_text(str(value))])
                                else:
                                    writer.writerow([clean_text(str(feature_value))])

                pbar.update(1)    # 진행 상황 업데이트