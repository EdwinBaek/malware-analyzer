import os
import pefile
from config.celery import Celery
from utils import save_report

app = Celery('static_tasks')
app.config_from_object('celeryconfig')


@app.task
def analyze_file(file_path, reports_dir):
    report = perform_static_analysis(file_path)
    report_path = os.path.join(reports_dir, f"{os.path.basename(file_path)}_static.json")
    save_report(report, report_path)
    return report_path


def perform_static_analysis(file_path):
    try:
        pe = pefile.PE(file_path)

        report = {
            "DOS_HEADER": {
                "e_magic": hex(pe.DOS_HEADER.e_magic),
                "e_lfanew": hex(pe.DOS_HEADER.e_lfanew),
            },
            "NT_HEADERS": {
                "Signature": hex(pe.NT_HEADERS.Signature),
            },
            "FILE_HEADER": {
                "Machine": hex(pe.FILE_HEADER.Machine),
                "NumberOfSections": pe.FILE_HEADER.NumberOfSections,
                "TimeDateStamp": hex(pe.FILE_HEADER.TimeDateStamp),
                "PointerToSymbolTable": hex(pe.FILE_HEADER.PointerToSymbolTable),
                "NumberOfSymbols": pe.FILE_HEADER.NumberOfSymbols,
                "SizeOfOptionalHeader": pe.FILE_HEADER.SizeOfOptionalHeader,
                "Characteristics": hex(pe.FILE_HEADER.Characteristics),
            },
            "OPTIONAL_HEADER": {
                "Magic": hex(pe.OPTIONAL_HEADER.Magic),
                "AddressOfEntryPoint": hex(pe.OPTIONAL_HEADER.AddressOfEntryPoint),
                "ImageBase": hex(pe.OPTIONAL_HEADER.ImageBase),
                "SectionAlignment": pe.OPTIONAL_HEADER.SectionAlignment,
                "FileAlignment": pe.OPTIONAL_HEADER.FileAlignment,
                "SizeOfImage": pe.OPTIONAL_HEADER.SizeOfImage,
                "SizeOfHeaders": pe.OPTIONAL_HEADER.SizeOfHeaders,
                "Subsystem": pe.OPTIONAL_HEADER.Subsystem,
                "DllCharacteristics": hex(pe.OPTIONAL_HEADER.DllCharacteristics),
            },
            "SECTIONS": []
        }

        for section in pe.sections:
            report["SECTIONS"].append({
                "Name": section.Name.decode().strip(),
                "VirtualAddress": hex(section.VirtualAddress),
                "Misc_VirtualSize": hex(section.Misc_VirtualSize),
                "SizeOfRawData": section.SizeOfRawData,
                "PointerToRawData": hex(section.PointerToRawData),
            })

        return report
    except pefile.PEFormatError:
        return {"error": "Invalid PE file"}
    except Exception as e:
        return {"error": str(e)}
