import os
import pefile
import hashlib
import math
from dotenv import load_dotenv

# .env 파일 로드
load_dotenv(dotenv_path='../.env')


class PEAnalyzer:
    def __init__(self, file_path=None):
        self.file_path = file_path or os.getenv('DATASET_PATH')
        if not self.file_path:
            raise ValueError("파일 경로가 지정되지 않았습니다. .env 파일에 DATASET_PATH를 설정하거나 file_path를 직접 지정하세요.")

    def extract_static_features(self):
        try:
            pe = pefile.PE(self.file_path)

            features = {}

            # 기본 파일 정보
            features['file_size'] = pe.OPTIONAL_HEADER.SizeOfImage

            # 해시 값
            with open(self.file_path, 'rb') as f:
                content = f.read()
                features['md5'] = hashlib.md5(content).hexdigest()
                features['sha1'] = hashlib.sha1(content).hexdigest()
                features['sha256'] = hashlib.sha256(content).hexdigest()

            # 엔트로피
            features['entropy'] = self.calculate_entropy(content)

            # 섹션 정보
            features['num_sections'] = len(pe.sections)
            features['sections'] = []
            for section in pe.sections:
                section_info = {
                    'name': section.Name.decode().rstrip('\x00'),
                    'virtual_size': section.Misc_VirtualSize,
                    'raw_size': section.SizeOfRawData,
                    'entropy': section.get_entropy()
                }
                features['sections'].append(section_info)

            # 임포트 정보
            features['imports'] = {}
            if hasattr(pe, 'DIRECTORY_ENTRY_IMPORT'):
                for entry in pe.DIRECTORY_ENTRY_IMPORT:
                    features['imports'][entry.dll.decode()] = [imp.name.decode() if imp.name else '' for imp in
                                                               entry.imports]

            # 익스포트 정보
            features['exports'] = []
            if hasattr(pe, 'DIRECTORY_ENTRY_EXPORT'):
                for exp in pe.DIRECTORY_ENTRY_EXPORT.symbols:
                    features['exports'].append(exp.name.decode() if exp.name else '')

            # 리소스 정보
            features['resources'] = []
            if hasattr(pe, 'DIRECTORY_ENTRY_RESOURCE'):
                for resource_type in pe.DIRECTORY_ENTRY_RESOURCE.entries:
                    if resource_type.name is not None:
                        name = resource_type.name
                    else:
                        name = pefile.RESOURCE_TYPE.get(resource_type.struct.Id)
                    features['resources'].append(str(name))

            # DLL 특성
            features['dll_characteristics'] = pe.OPTIONAL_HEADER.DllCharacteristics

            return features

        except pefile.PEFormatError:
            return None

    @staticmethod
    def calculate_entropy(data):
        if not data:
            return 0
        entropy = 0
        for x in range(256):
            p_x = float(data.count(x)) / len(data)
            if p_x > 0:
                entropy += - p_x * math.log(p_x, 2)
        return entropy


# 사용 예시
if __name__ == "__main__":
    try:
        analyzer = PEAnalyzer()
        features = analyzer.extract_static_features()
        if features:
            print(features)
        else:
            print("올바른 PE 파일이 아닙니다.")
    except ValueError as e:
        print(f"오류: {e}")